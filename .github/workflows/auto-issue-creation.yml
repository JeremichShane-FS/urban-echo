name: "Auto Issue Creation"
on:
  push:
    branches: [main, staging, dev]
  workflow_dispatch:

jobs:
  todo-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "TODO to Issue"
        uses: alstr/todo-to-issue-action@v5
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          CLOSE_ISSUES: "true"
          AUTO_P: "false"
          # Create with no labels - we'll add professional labels in next job
          IDENTIFIERS: >
            [
              {"name": "TODO:", "labels": []}
            ]
          ISSUE_TEMPLATE: |
            {{ body }}

            ---
            **File:** {{ url }}

            **Code:**
            ```javascript
            {{ snippet }}
            ```

  apply-professional-labels:
    needs: todo-to-issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4 # Add this to fix git repository error

      - name: "Apply Professional Labels from Automation Guide"
        run: |
          echo "üè∑Ô∏è Applying professional labels to recent TODO issues only..."

          # Wait for TODO issues to be fully created
          sleep 30

          # Only process issues created in the last 5 minutes (just from this workflow run)
          CUTOFF_TIME=$(date -d '5 minutes ago' --iso-8601=seconds)
          echo "üîç Looking for issues created after: $CUTOFF_TIME"

          # Get recent issues and filter by creation time
          gh issue list --limit 20 --json number,title,body,createdAt | jq -r --arg cutoff "$CUTOFF_TIME" '.[] | select(.createdAt > $cutoff) | "\(.number)|\(.title)"' | while IFS='|' read -r number title; do
            if [[ -n "$number" && -n "$title" ]]; then
              echo ""
              echo "üìù Processing recent issue #$number: $title"
              
              # Skip workflow update issues - they get basic labels only
              if [[ "$title" =~ "Workflow Update:" ]]; then
                echo "   ‚ö†Ô∏è Workflow issue detected - applying basic labels only"
                gh issue edit "$number" --add-label "auto-generated" 2>/dev/null || true
                gh issue edit "$number" --add-label "type: enhancement" 2>/dev/null || true
                gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                echo "   ‚úÖ Basic labels applied to workflow issue #$number"
                continue
              fi
              
              # Skip conventional commit issues - they already have correct labels
              if [[ "$title" =~ ^\[.*\] ]]; then
                echo "   ‚ö†Ô∏è Conventional commit issue detected - skipping (already labeled)"
                continue
              fi
              
              # Only process TODO-style issues (check both title and body for TODO indicators)
              if [[ "$title" =~ (TODO|Define|Develop|Implement|Create|Component|Test.*system|Test.*labeling) ]] || [[ "$title" =~ (API|endpoint|route|Component|system) ]]; then
                echo "   ‚úÖ TODO-style issue detected - applying professional labels"
                
                # Get the commit author for assignment
                COMMIT_AUTHOR="${{ github.actor }}"
                echo "   üë§ Assigning to commit author: $COMMIT_AUTHOR"
                
                # Get the full issue body for content analysis
                ISSUE_BODY=$(gh issue view "$number" --json body --jq '.body' 2>/dev/null || echo "")
                CONTENT="$title $ISSUE_BODY"
                
                echo "   üè∑Ô∏è Adding base professional labels..."
                gh issue edit "$number" --add-label "auto-generated" 2>/dev/null || true
                gh issue edit "$number" --add-label "type: enhancement" 2>/dev/null || true
                
                # Assign the issue to the person who pushed the code
                gh issue edit "$number" --add-assignee "$COMMIT_AUTHOR" 2>/dev/null || true
                
                # Add AREA labels - ONLY ONE AREA PER ISSUE (using elif chain)
                AREA_DETECTED=false
                if [[ "$CONTENT" =~ (payment|stripe|checkout|billing|Purchase|Cart) ]]; then
                  echo "     üí≥ Adding payment area labels"
                  gh issue edit "$number" --add-label "area: payment" 2>/dev/null || true
                  gh issue edit "$number" --add-label "stripe" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (security|auth|login|token|password|Auth0) ]]; then
                  echo "     üîí Adding security area labels"
                  gh issue edit "$number" --add-label "area: security" 2>/dev/null || true
                  gh issue edit "$number" --add-label "auth0" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (database|DB|mongo|schema|model|data) ]]; then
                  echo "     üóÑÔ∏è Adding database area labels"
                  gh issue edit "$number" --add-label "area: database" 2>/dev/null || true
                  gh issue edit "$number" --add-label "mongodb" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (API|endpoint|route|backend|integration|Routes) ]]; then
                  echo "     üîå Adding API area labels"
                  gh issue edit "$number" --add-label "area: api" 2>/dev/null || true
                  gh issue edit "$number" --add-label "area: backend" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (Component|hero|Dynamic|CMS|frontend|UI|design|Navbar|Footer) ]]; then
                  echo "     üé® Adding frontend area labels"
                  gh issue edit "$number" --add-label "area: frontend" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                fi
                
                # Add priority only if no area was detected
                if [[ "$AREA_DETECTED" == "false" ]]; then
                  echo "     üìù Adding low priority (no specific area detected)"
                  gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                fi
                
                # Add TECHNOLOGY labels only if specifically mentioned
                if [[ "$CONTENT" =~ (Next\.js|NextJS|Next) ]]; then
                  gh issue edit "$number" --add-label "nextjs" 2>/dev/null || true
                fi
                
                # Add WORKFLOW labels only if specifically mentioned
                if [[ "$CONTENT" =~ (performance.*optimize|optimize.*speed) ]]; then
                  echo "     ‚ö° Adding performance label"
                  gh issue edit "$number" --add-label "performance" 2>/dev/null || true
                fi
                
                if [[ "$CONTENT" =~ (refactor.*code|technical.*debt) ]]; then
                  echo "     üîß Adding tech-debt label"
                  gh issue edit "$number" --add-label "tech-debt" 2>/dev/null || true
                fi
                
                if [[ "$CONTENT" =~ (console\.log|debug.*cleanup) ]]; then
                  echo "     üßπ Adding cleanup label"
                  gh issue edit "$number" --add-label "cleanup" 2>/dev/null || true
                fi
                
                echo "   ‚úÖ Professional labels applied to TODO issue #$number"
                echo "   üë§ Assigned to: $COMMIT_AUTHOR"
                
                # Show final labels
                FINAL_LABELS=$(gh issue view "$number" --json labels --jq '.labels | map(.name) | join(", ")' 2>/dev/null || echo "Failed to get labels")
                echo "   üè∑Ô∏è Final labels: $FINAL_LABELS"
              else
                echo "   ‚ö†Ô∏è Not a TODO issue - skipping professional labeling"
              fi
            fi
          done

          echo ""
          echo "üéâ Professional labeling complete!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  analyze-conventional-commits:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "Analyze Conventional Commit and Create Issue"
        run: |
          # Get full commit message
          FULL_COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git log -1 --pretty=%H)
          AUTHOR=$(git log -1 --pretty=%an)

          echo "Analyzing conventional commit: $FULL_COMMIT_MSG"

          # Skip merge commits
          if echo "$FULL_COMMIT_MSG" | grep -q "^Merge\|^merge"; then
            echo "Skipping merge commit"
            exit 0
          fi

          # Get first line as header
          COMMIT_HEADER=$(echo "$FULL_COMMIT_MSG" | head -n1)

          # Extract type and scope using simple string parsing
          COMMIT_TYPE=""
          COMMIT_SCOPE=""
          COMMIT_SUBJECT="$COMMIT_HEADER"

          # Check if it matches conventional commit format
          if [[ "$COMMIT_HEADER" == *": "* ]]; then
            TYPE_PART="${COMMIT_HEADER%%:*}"
            COMMIT_SUBJECT="${COMMIT_HEADER#*: }"
            
            # Check for scope in parentheses
            if [[ "$TYPE_PART" == *"("*")" ]]; then
              COMMIT_TYPE="${TYPE_PART%%(*}"
              COMMIT_SCOPE="${TYPE_PART#*(}"
              COMMIT_SCOPE="${COMMIT_SCOPE%)}"
            else
              COMMIT_TYPE="$TYPE_PART"
            fi
          fi

          # Only create issues for specific commit types
          if [[ -n "$COMMIT_TYPE" ]] && [[ "$COMMIT_TYPE" =~ ^(feat|fix|perf|refactor)$ ]]; then
            
            # Create issue title
            if [[ -n "$COMMIT_SCOPE" ]]; then
              ISSUE_TITLE="[$COMMIT_TYPE($COMMIT_SCOPE)] $COMMIT_SUBJECT"
            else
              ISSUE_TITLE="[$COMMIT_TYPE] $COMMIT_SUBJECT"
            fi
            
            # Get commit author for assignment
            COMMIT_AUTHOR="${{ github.actor }}"
            
            # Create issue body
            ISSUE_BODY="## Conventional Commit Analysis

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`${COMMIT_SCOPE:-none}\`
          **Subject:** $COMMIT_SUBJECT

          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Assigned to:** @$COMMIT_AUTHOR

          ## Full Commit Message
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          ## Analysis
          This issue was automatically created from a conventional commit to track implementation progress."
            
            # Determine labels based on commit type (using exact automation guide labels)
            LABELS="auto-generated"
            case "$COMMIT_TYPE" in
              "feat")
                LABELS="$LABELS,type: enhancement"
                ;;
              "fix"|"hotfix")
                LABELS="$LABELS,type: bug"
                ;;
              "perf")
                LABELS="$LABELS,performance"
                ;;
              "refactor")
                LABELS="$LABELS,tech-debt"
                ;;
              "docs")
                LABELS="$LABELS,type: documentation"
                ;;
              "security")
                LABELS="$LABELS,area: security,priority: critical"
                ;;
            esac
            
            # Add scope-based labels (using exact automation guide labels)
            case "$COMMIT_SCOPE" in
              "frontend"|"ui"|"components")
                LABELS="$LABELS,area: frontend"
                ;;
              "backend"|"server"|"api")
                LABELS="$LABELS,area: backend,area: api"
                ;;
              "database"|"db"|"mongo")
                LABELS="$LABELS,area: database,mongodb"
                ;;
              "auth"|"authentication"|"login")
                LABELS="$LABELS,area: security,auth0"
                ;;
              "payment"|"stripe"|"checkout")
                LABELS="$LABELS,area: payment,stripe,priority: high"
                ;;
              "cart"|"shopping")
                LABELS="$LABELS,area: frontend,area: backend"
                ;;
              "products"|"catalog")
                LABELS="$LABELS,area: database,area: api"
                ;;
              "orders"|"fulfillment")
                LABELS="$LABELS,area: backend,area: database"
                ;;
              "ci"|"workflow"|"automation")
                # CI/workflow changes are technical debt improvements
                LABELS="$LABELS,tech-debt"
                ;;
            esac
            
            echo "Creating issue: $ISSUE_TITLE"
            CREATED_ISSUE=$(gh issue create \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "$LABELS" \
              --assignee "$COMMIT_AUTHOR")
            echo "‚úÖ Created and assigned issue to $COMMIT_AUTHOR: $CREATED_ISSUE"
          else
            echo "Skipping commit type: $COMMIT_TYPE (not configured for issue creation)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  analyze-file-changes:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "Analyze File Changes and Create Issues"
        run: |
          echo "üîç Analyzing file changes..."

          # Get changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No files changed, skipping analysis"
            exit 0
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Analyze significant changes
          while IFS= read -r file; do
            if [[ -n "$file" ]]; then
              echo ""
              echo "Analyzing: $file"
              
              # Check file type and determine if it needs tracking (using exact automation guide labels)
              SHOULD_CREATE_ISSUE=false
              ISSUE_TITLE=""
              ISSUE_LABELS="auto-generated"
              
              case "$file" in
                *.js|*.jsx|*.ts|*.tsx)
                  if [[ "$file" == *"component"* ]] || [[ "$file" == *"Component"* ]]; then
                    SHOULD_CREATE_ISSUE=true
                    ISSUE_TITLE="Component Update: $file"
                    ISSUE_LABELS="$ISSUE_LABELS,area: frontend,type: enhancement"
                  elif [[ "$file" == *"api"* ]] || [[ "$file" == *"API"* ]]; then
                    SHOULD_CREATE_ISSUE=true
                    ISSUE_TITLE="API Update: $file"
                    ISSUE_LABELS="$ISSUE_LABELS,area: api,area: backend,type: enhancement"
                  fi
                  ;;
                *.scss|*.sass|*.css)
                  SHOULD_CREATE_ISSUE=true
                  ISSUE_TITLE="Styling Update: $file"
                  ISSUE_LABELS="$ISSUE_LABELS,area: frontend,type: enhancement"
                  ;;
                *package.json|*package-lock.json|*yarn.lock)
                  SHOULD_CREATE_ISSUE=true
                  ISSUE_TITLE="Dependency Update: $file"
                  ISSUE_LABELS="$ISSUE_LABELS,type: enhancement,priority: low"
                  ;;
                *.md)
                  if [[ "$file" == *"README"* ]]; then
                    SHOULD_CREATE_ISSUE=true
                    ISSUE_TITLE="Documentation Update: $file"
                    ISSUE_LABELS="$ISSUE_LABELS,type: documentation"
                  fi
                  ;;
                .github/workflows/*)
                  SHOULD_CREATE_ISSUE=true
                  ISSUE_TITLE="Workflow Update: $file"
                  ISSUE_LABELS="$ISSUE_LABELS,type: enhancement,priority: medium"
                  ;;
              esac
              
              if [[ "$SHOULD_CREATE_ISSUE" == "true" ]]; then
                # Get file diff for analysis
                FILE_DIFF=$(git diff HEAD~1 HEAD -- "$file" | head -50)
                
                ISSUE_BODY="## File Change Analysis

          **File:** \`$file\`
          **Change Type:** Automatic detection
          **Assigned to:** @${{ github.actor }}

          ## Changes Made
          \`\`\`diff
          $FILE_DIFF
          \`\`\`

          ## Next Steps
          - [ ] Review changes for quality
          - [ ] Update related documentation if needed
          - [ ] Test affected functionality

          _This issue was automatically created to track significant file changes._"
                
                echo "Creating issue for: $file"
                CREATED_ISSUE=$(gh issue create \
                  --title "$ISSUE_TITLE" \
                  --body "$ISSUE_BODY" \
                  --label "$ISSUE_LABELS" \
                  --assignee "${{ github.actor }}")
                echo "‚úÖ Created and assigned issue: $CREATED_ISSUE"
              fi
            fi
          done <<< "$CHANGED_FILES"

          echo "üéâ File change analysis complete!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
