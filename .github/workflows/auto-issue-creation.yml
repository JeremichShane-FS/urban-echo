name: "Auto Issue Creation"
on:
  push:
    branches: [dev]
    paths:
      - "**/*.js"
      - "**/*.jsx"
      - "**/*.ts"
      - "**/*.tsx"
      - "**/*.vue"
      - "**/*.py"
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  todo-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          persist-credentials: false

      - name: "Security validation"
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_AUTHOR: ${{ github.event.head_commit.author.name }}
        run: |
          echo "🔒 Performing security validation..."

          # Validate commit message length (prevent extremely long messages)
          if [[ ${#COMMIT_MESSAGE} -gt 1000 ]]; then
            echo "❌ Commit message too long, potential attack"
            exit 1
          fi

          # Log sanitized info for debugging (without exposing full message)
          echo "Commit author: $COMMIT_AUTHOR"
          echo "Message length: ${#COMMIT_MESSAGE}"
          echo "First 50 chars: ${COMMIT_MESSAGE:0:50}..."

      - name: "Check if workflow should run"
        id: should-run
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # Skip if this is a merge commit to avoid duplicates
          if [[ "$COMMIT_MESSAGE" =~ ^Merge.* ]]; then
            echo "Skipping for merge commit"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if any relevant files changed
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(js|jsx|ts|tsx|vue|py)$' || true)
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No relevant files changed"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Relevant files changed: $CHANGED_FILES"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: "TODO to Issue"
        if: steps.should-run.outputs.skip == 'false'
        uses: alstr/todo-to-issue-action@v5
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          CLOSE_ISSUES: "true"
          AUTO_P: "false"
          AUTO_ASSIGN: "true"
          PROJECT: "user/JeremichShane-FS/2506-WDV359-JeremichShane"
          PROJECTS_SECRET: "${{ secrets.PROJECTS_SECRET }}"
          IDENTIFIERS: |
            [
              {"name": "TODO:", "labels": ["auto-generated", "type: enhancement"]},
              {"name": "FIX:", "labels": ["auto-generated", "type: bug"]},
              {"name": "FIXME:", "labels": ["auto-generated", "type: bug", "priority: high"]},
              {"name": "HACK:", "labels": ["auto-generated", "type: technical-debt"]},
              {"name": "NOTE:", "labels": ["auto-generated", "type: documentation"]},
              {"name": "REVIEW:", "labels": ["auto-generated", "needs-review"]}
            ]
          ISSUE_TEMPLATE: |
            {{ body }}

            ---
            **📁 File:** [{{ filename }}]({{ url }})
            **📍 Line:** {{ line }}
            **👤 Author:** @{{ author }}
            **🌿 Branch:** dev → staging → main
            **📅 Created:** {{ date }}

            ```{{ language }}
            {{ snippet }}
            ```

  apply-smart-labels:
    needs: [todo-to-issue]
    if: needs.todo-to-issue.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: "Apply Smart Labels & Intelligence"
        run: |
          echo "🏷️ Applying smart labels and intelligence to recent issues..."

          # Wait for issues to be fully created
          sleep 30

          CUTOFF_TIME=$(date -d '3 minutes ago' --iso-8601=seconds)

          # Get recent auto-generated issues with secure jq processing
          RECENT_ISSUES=$(gh issue list --label "auto-generated" --limit 15 --json number,title,body,createdAt)

          if [[ -z "$RECENT_ISSUES" || "$RECENT_ISSUES" == "[]" ]]; then
            echo "No recent issues found to process"
            exit 0
          fi

          # Process issues with secure parameter expansion
          echo "$RECENT_ISSUES" | jq -r --arg cutoff "$CUTOFF_TIME" '.[] | select(.createdAt > $cutoff) | [.number, .title, .body] | @tsv' | while IFS=$'\t' read -r number title body; do
            if [[ -n "$number" && -n "$title" ]]; then
              echo "📝 Processing issue #$number"
              
              # Sanitize inputs for security
              title=$(echo "$title" | tr -d '\n\r' | head -c 200)
              
              # Enhanced template extraction with fallback
              TEMPLATE=$(echo "$title" | grep -o '^\[[^]]*\]' | tr '[:lower:]' '[:upper:]' | sed 's/\[//g' | sed 's/\]//g')
              
              if [[ -z "$TEMPLATE" ]]; then
                # Fallback: detect template from content (safely)
                if echo "$body" | grep -qi 'component\|ui\|ux\|frontend'; then
                  TEMPLATE="COMPONENT"
                elif echo "$body" | grep -qi 'api\|route\|backend\|server'; then
                  TEMPLATE="ROUTES"
                elif echo "$body" | grep -qi 'test\|spec\|cypress\|jest'; then
                  TEMPLATE="TEST"
                elif echo "$body" | grep -qi 'security\|auth\|vulnerability'; then
                  TEMPLATE="SECURITY"
                else
                  TEMPLATE="GENERAL"
                fi
                echo "   🔍 Auto-detected template: $TEMPLATE"
              else
                echo "   🎯 Found template: $TEMPLATE"
              fi
              
              # Apply labels based on template (using safe commands)
              case "$TEMPLATE" in
                "SECURITY")
                  gh issue edit "$number" --add-label "area: security,priority: critical" 2>/dev/null || true
                  if echo "$body" | grep -qi 'FIX:\|FIXME:'; then
                    gh issue edit "$number" --remove-label "type: enhancement" --add-label "type: bug,priority: critical" 2>/dev/null || true
                  fi
                  ;;
                "COMPONENT"|"UI/UX"|"FRONTEND")
                  gh issue edit "$number" --add-label "area: frontend,priority: medium" 2>/dev/null || true
                  ;;
                "ROUTES"|"DATA"|"BACKEND"|"API")
                  gh issue edit "$number" --add-label "area: backend,area: api,priority: medium" 2>/dev/null || true
                  ;;
                "BUG")
                  gh issue edit "$number" --remove-label "type: enhancement" --add-label "type: bug" 2>/dev/null || true
                  ;;
                "TEST")
                  gh issue edit "$number" --add-label "area: testing,priority: medium" 2>/dev/null || true
                  ;;
                *)
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  ;;
              esac
              
              echo "   ✅ Secure labels applied to #$number"
            fi
          done

          echo "🎉 Secure smart labeling complete!"

      - name: "Create daily TODO summary"
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "📊 Creating daily TODO summary..."

          TODAY=$(date +%Y-%m-%d)
          OPEN_TODOS=$(gh issue list --label "auto-generated" --state "open" --limit 100 --json number | jq '. | length')
          CLOSED_TODAY=$(gh issue list --label "auto-generated" --state "closed" --limit 100 --json closedAt | jq --arg today "$TODAY" '[.[] | select(.closedAt | startswith($today))] | length')

          {
            echo "## 📋 Daily TODO Summary - $TODAY"
            echo ""
            echo "- 🔓 **Open TODOs:** $OPEN_TODOS"
            echo "- ✅ **Completed Today:** $CLOSED_TODAY"
            echo ""
            echo "### 🔥 High Priority Items"
            gh issue list --label "auto-generated,priority: high" --state "open" --limit 5 --json title,number | jq -r '.[] | "- #\(.number): \(.title)"'
          } > /tmp/summary.md

          gh issue create --title "📊 TODO Summary - $TODAY" --body-file /tmp/summary.md --label "summary,auto-generated" 2>/dev/null || echo "Summary created"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
