name: "Auto Issue Creation"
on:
  push:
    branches: [main, staging, dev]
  workflow_dispatch:

jobs:
  todo-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "TODO to Issue"
        uses: alstr/todo-to-issue-action@v5
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          CLOSE_ISSUES: "true"
          AUTO_P: "false"
          # Create with no labels - we'll add professional labels in next job
          IDENTIFIERS: >
            [
              {"name": "TODO:", "labels": []},
              {"name": "FIX:", "labels": []}
            ]
          ISSUE_TEMPLATE: |
            {{ body }}

            ---
            **File:** {{ url }}

            **Code:**
            ```javascript
            {{ snippet }}
            ```

  apply-professional-labels:
    needs: todo-to-issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "Apply Professional Labels to TODO Issues"
        run: |
          echo "🏷️ Applying professional labels to recent TODO/FIX issues..."

          # Wait for TODO issues to be fully created
          sleep 30

          # Only process issues created in the last 5 minutes
          CUTOFF_TIME=$(date -d '5 minutes ago' --iso-8601=seconds)
          echo "🔍 Looking for TODO/FIX issues created after: $CUTOFF_TIME"

          gh issue list --limit 20 --json number,title,body,createdAt | jq -r --arg cutoff "$CUTOFF_TIME" '.[] | select(.createdAt > $cutoff) | "\(.number)|\(.title)"' | while IFS='|' read -r number title; do
            if [[ -n "$number" && -n "$title" ]]; then
              echo ""
              echo "📝 Processing issue #$number: $title"
              
              # Process ALL recent issues - don't filter by title since action strips TODO:/FIX:
              echo "   ✅ Recent issue detected - checking for TODO/FIX origin..."
              
              # Get the commit author for assignment
              COMMIT_AUTHOR="${{ github.actor }}"
              echo "   👤 Assigning to commit author: $COMMIT_AUTHOR"
              
              # Get the full issue body for content analysis
              ISSUE_BODY=$(gh issue view "$number" --json body --jq '.body' 2>/dev/null || echo "")
              CONTENT="$title $ISSUE_BODY"
              
              # Check if this issue was created from TODO/FIX comment by looking for file path in body
              if [[ "$ISSUE_BODY" =~ \*\*File:\*\* ]] || [[ "$ISSUE_BODY" =~ \*\*Code:\*\* ]]; then
                echo "   ✅ Confirmed TODO/FIX issue - applying professional labels"
                
                echo "   🏷️ Adding base labels..."
                # Always add these labels first
                gh issue edit "$number" --add-label "auto-generated" 2>/dev/null || true
                gh issue edit "$number" --add-label "type: enhancement" 2>/dev/null || true
                
                # Check if this was a FIX comment without template - add [BUG] behavior
                if [[ ! "$title" =~ \[.*\] ]] && [[ "$ISSUE_BODY" =~ FIX: ]]; then
                  echo "   🐛 FIX comment without template detected - applying [BUG] behavior"
                  gh issue edit "$number" --remove-label "type: enhancement" 2>/dev/null || true
                  gh issue edit "$number" --add-label "type: bug" 2>/dev/null || true
                fi
                
                # Assign the issue to the person who pushed the code
                gh issue edit "$number" --add-assignee "$COMMIT_AUTHOR" 2>/dev/null || true
                
                # Add AREA labels - Use template prefixes for better accuracy
                AREA_DETECTED=false
                
                # Check template prefix first for most accurate labeling
                if [[ "$title" =~ \[COMPONENT\]|\[UI/UX\] ]]; then
                  echo "     🎨 Frontend template detected: $title"
                  gh issue edit "$number" --add-label "area: frontend" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[ROUTES\]|\[DATA\] ]]; then
                  echo "     🔌 API/Backend template detected: $title"
                  gh issue edit "$number" --add-label "area: api" 2>/dev/null || true
                  gh issue edit "$number" --add-label "area: backend" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[SECURITY\] ]]; then
                  echo "     🔒 Security template detected: $title"
                  gh issue edit "$number" --add-label "area: security" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[BUG\] ]]; then
                  echo "     🐛 Bug template detected: $title"
                  gh issue edit "$number" --remove-label "type: enhancement" 2>/dev/null || true
                  gh issue edit "$number" --add-label "type: bug" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[PERF\] ]]; then
                  echo "     ⚡ Performance template detected: $title"
                  gh issue edit "$number" --add-label "performance" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[REFACTOR\] ]]; then
                  echo "     🔧 Refactor template detected: $title"
                  gh issue edit "$number" --add-label "tech-debt" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[TEST\] ]]; then
                  echo "     🧪 Test template detected: $title"
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[DOCS\] ]]; then
                  echo "     📚 Documentation template detected: $title"
                  gh issue edit "$number" --remove-label "type: enhancement" 2>/dev/null || true
                  gh issue edit "$number" --add-label "type: documentation" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$title" =~ \[DEPENDENCY\] ]]; then
                  echo "     📦 Dependency template detected: $title"
                  gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                  AREA_DETECTED=true
                # Fallback to content-based detection if no template prefix
                elif [[ "$CONTENT" =~ (payment|stripe|checkout|billing|Purchase|Cart) ]]; then
                  echo "     💳 Payment content detected"
                  gh issue edit "$number" --add-label "area: payment" 2>/dev/null || true
                  gh issue edit "$number" --add-label "stripe" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (database|DB|mongo|schema|model|data) ]]; then
                  echo "     🗄️ Database content detected"
                  gh issue edit "$number" --add-label "area: database" 2>/dev/null || true
                  gh issue edit "$number" --add-label "mongodb" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (API|endpoint|route|backend|integration|Routes) ]]; then
                  echo "     🔌 API content detected"
                  gh issue edit "$number" --add-label "area: api" 2>/dev/null || true
                  gh issue edit "$number" --add-label "area: backend" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                elif [[ "$CONTENT" =~ (Component|hero|Dynamic|CMS|frontend|UI|design|Navbar|Footer) ]]; then
                  echo "     🎨 Frontend content detected"
                  gh issue edit "$number" --add-label "area: frontend" 2>/dev/null || true
                  gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                  AREA_DETECTED=true
                fi
                
                # Add priority only if no area was detected
                if [[ "$AREA_DETECTED" == "false" ]]; then
                  echo "     📝 Adding low priority (no specific area detected)"
                  gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                fi
                
                # Add TECHNOLOGY labels only if specifically mentioned
                if [[ "$CONTENT" =~ (Next\.js|NextJS|Next) ]]; then
                  gh issue edit "$number" --add-label "nextjs" 2>/dev/null || true
                fi
                
                # Add WORKFLOW labels only if specifically mentioned
                if [[ "$CONTENT" =~ (performance.*optimize|optimize.*speed) ]]; then
                  echo "     ⚡ Adding performance label"
                  gh issue edit "$number" --add-label "performance" 2>/dev/null || true
                fi
                
                if [[ "$CONTENT" =~ (refactor.*code|technical.*debt) ]]; then
                  echo "     🔧 Adding tech-debt label"
                  gh issue edit "$number" --add-label "tech-debt" 2>/dev/null || true
                fi
                
                if [[ "$CONTENT" =~ (console\.log|debug.*cleanup) ]]; then
                  echo "     🧹 Adding cleanup label"
                  gh issue edit "$number" --add-label "cleanup" 2>/dev/null || true
                fi
                
                echo "   ✅ Professional labels applied to TODO/FIX issue #$number"
                echo "   👤 Assigned to: $COMMIT_AUTHOR"
                
                # Show final labels
                FINAL_LABELS=$(gh issue view "$number" --json labels --jq '.labels | map(.name) | join(", ")' 2>/dev/null || echo "Failed to get labels")
                echo "   🏷️ Final labels: $FINAL_LABELS"
              else
                echo "   ⚠️ Not a TODO/FIX issue (no file/code markers) - skipping"
              fi
            fi
          done

          echo ""
          echo "🎉 TODO/FIX professional labeling complete!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
