name: "Auto Issue Creation"
on:
  push:
    branches: [main, staging, dev]
  pull_request:
    branches: [main, staging]

jobs:
  todo-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "TODO to Issue"
        uses: alstr/todo-to-issue-action@v5
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BEFORE: ${{ github.event.before }}
          SHA: ${{ github.sha }}
          INSERT_ISSUE_URLS: "true"
          CLOSE_ISSUES: "true"
          AUTO_P: "true"
          IDENTIFIERS: >
            [
              {"name": "TODO", "labels": ["type: enhancement", "auto-generated"]},
              {"name": "FIXME", "labels": ["type: bug", "auto-generated"]},
              {"name": "HACK", "labels": ["tech-debt", "auto-generated"]},
              {"name": "BUG", "labels": ["type: bug", "priority: high"]},
              {"name": "OPTIMIZE", "labels": ["performance", "auto-generated"]},
              {"name": "SECURITY", "labels": ["area: security", "priority: high"]},
              {"name": "REFACTOR", "labels": ["tech-debt", "priority: medium"]},
              {"name": "UI", "labels": ["area: frontend", "auto-generated"]},
              {"name": "API", "labels": ["area: api", "auto-generated"]},
              {"name": "DB", "labels": ["area: database", "mongodb"]}
            ]

  conventional-commit-analysis:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "Analyze Conventional Commits"
        run: |
          # Get full commit message
          FULL_COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_HASH=$(git log -1 --pretty=%H)
          AUTHOR=$(git log -1 --pretty=%an)

          echo "Analyzing conventional commit: $FULL_COMMIT_MSG"

          # Parse conventional commit format: type(scope): subject
          COMMIT_HEADER=$(echo "$FULL_COMMIT_MSG" | head -n 1)
          COMMIT_BODY=$(echo "$FULL_COMMIT_MSG" | tail -n +3)

          # Extract type and scope using regex
          if [[ $COMMIT_HEADER =~ ^([a-z]+)(\(([^)]+)\))?: ]]; then
            COMMIT_TYPE="${BASH_REMATCH[1]}"
            COMMIT_SCOPE="${BASH_REMATCH[3]}"
            COMMIT_SUBJECT="${COMMIT_HEADER#*: }"
          else
            echo "Not a conventional commit format, skipping analysis"
            exit 0
          fi

          echo "Commit Type: $COMMIT_TYPE"
          echo "Commit Scope: $COMMIT_SCOPE"
          echo "Commit Subject: $COMMIT_SUBJECT"

          # Determine priority based on commit type
          case $COMMIT_TYPE in
            "fix"|"hotfix"|"security")
              PRIORITY="priority: high"
              ;;
            "feat"|"perf"|"refactor")
              PRIORITY="priority: medium"
              ;;
            "docs"|"style"|"test"|"chore")
              PRIORITY="priority: low"
              ;;
            *)
              PRIORITY="priority: medium"
              ;;
          esac

          # Determine area labels based on scope
          AREA_LABELS=""
          case $COMMIT_SCOPE in
            "frontend"|"ui"|"components"|"styles")
              AREA_LABELS="area: frontend"
              ;;
            "backend"|"server"|"api")
              AREA_LABELS="area: backend,area: api"
              ;;
            "database"|"db"|"mongo"|"models")
              AREA_LABELS="area: database,mongodb"
              ;;
            "auth"|"authentication"|"login")
              AREA_LABELS="area: security,auth0"
              ;;
            "payment"|"stripe"|"checkout")
              AREA_LABELS="area: payment,stripe"
              ;;
            "docs"|"documentation")
              AREA_LABELS="area: documentation"
              ;;
            *)
              # Try to infer from scope name
              if [[ $COMMIT_SCOPE == *"test"* ]]; then
                AREA_LABELS="area: testing"
              elif [[ $COMMIT_SCOPE == *"deploy"* ]]; then
                AREA_LABELS="area: deployment"
              fi
              ;;
          esac

          # Create issues based on commit type and content analysis

          # Security-related commits
          if [[ $COMMIT_TYPE == "security" ]] || echo "$FULL_COMMIT_MSG" | grep -iE "(security|vulnerability|auth|authentication|password|token|encrypt)"; then
            gh issue create \
              --title "üîí Security Review: $COMMIT_SUBJECT" \
              --body "**Security-Related Commit Detected**

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`$COMMIT_SCOPE\`
          **Subject:** $COMMIT_SUBJECT
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Branch:** ${{ github.ref_name }}

          **Full Commit Message:**
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          **Security Review Checklist:**
          - [ ] Authentication mechanisms reviewed
          - [ ] Data validation implemented
          - [ ] Input sanitization verified
          - [ ] API security confirmed
          - [ ] Payment processing security validated
          - [ ] Access controls verified" \
              --label "area: security,priority: high,auto-generated" \
              --assignee "$AUTHOR"
          fi

          # Performance-related commits
          if [[ $COMMIT_TYPE == "perf" ]] || echo "$FULL_COMMIT_MSG" | grep -iE "(performance|optimize|slow|speed|bottleneck)"; then
            gh issue create \
              --title "üöÄ Performance Review: $COMMIT_SUBJECT" \
              --body "**Performance-Related Commit Detected**

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`$COMMIT_SCOPE\`
          **Subject:** $COMMIT_SUBJECT
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Branch:** ${{ github.ref_name }}

          **Full Commit Message:**
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          **Performance Review Checklist:**
          - [ ] Page load times measured
          - [ ] Database query optimization verified
          - [ ] Image optimization confirmed
          - [ ] Bundle size impact assessed
          - [ ] Caching opportunities evaluated
          - [ ] Memory usage analyzed" \
              --label "performance,$PRIORITY,auto-generated,$AREA_LABELS" \
              --assignee "$AUTHOR"
          fi

          # Database-related commits
          if echo "$COMMIT_SCOPE,$FULL_COMMIT_MSG" | grep -iE "(database|mongo|db|query|schema|migration|model)"; then
            gh issue create \
              --title "üóÑÔ∏è Database Review: $COMMIT_SUBJECT" \
              --body "**Database-Related Commit Detected**

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`$COMMIT_SCOPE\`
          **Subject:** $COMMIT_SUBJECT
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Branch:** ${{ github.ref_name }}

          **Full Commit Message:**
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          **Database Review Checklist:**
          - [ ] Schema changes validated
          - [ ] Query performance tested
          - [ ] Data migration requirements assessed
          - [ ] Indexing strategy reviewed
          - [ ] Backup considerations evaluated
          - [ ] Data integrity verified" \
              --label "area: database,mongodb,$PRIORITY,auto-generated" \
              --assignee "$AUTHOR"
          fi

          # Payment-related commits
          if echo "$COMMIT_SCOPE,$FULL_COMMIT_MSG" | grep -iE "(payment|stripe|checkout|billing|transaction)"; then
            gh issue create \
              --title "üí≥ Payment System Review: $COMMIT_SUBJECT" \
              --body "**Payment-Related Commit Detected**

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`$COMMIT_SCOPE\`
          **Subject:** $COMMIT_SUBJECT
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Branch:** ${{ github.ref_name }}

          **Full Commit Message:**
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          **Payment System Review Checklist:**
          - [ ] Stripe integration tested
          - [ ] Payment flow verified
          - [ ] Error handling confirmed
          - [ ] Transaction logging validated
          - [ ] Refund processes tested
          - [ ] Security compliance verified" \
              --label "area: payment,stripe,priority: high,auto-generated" \
              --assignee "$AUTHOR"
          fi

          # Breaking changes detection
          if echo "$FULL_COMMIT_MSG" | grep -E "BREAKING CHANGE|!:"; then
            gh issue create \
              --title "‚ö†Ô∏è Breaking Change Review: $COMMIT_SUBJECT" \
              --body "**Breaking Change Detected**

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`$COMMIT_SCOPE\`
          **Subject:** $COMMIT_SUBJECT
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Branch:** ${{ github.ref_name }}

          **Full Commit Message:**
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          **Breaking Change Review Checklist:**
          - [ ] Migration guide created
          - [ ] Documentation updated
          - [ ] Backward compatibility assessed
          - [ ] Deprecation notices added
          - [ ] Version bump planned
          - [ ] Team notified" \
              --label "type: breaking-change,priority: critical,auto-generated,$AREA_LABELS" \
              --assignee "$AUTHOR"
          fi

          # Feature commits that might need follow-up
          if [[ $COMMIT_TYPE == "feat" ]]; then
            # Check if documentation might be needed
            if ! echo "$FULL_COMMIT_MSG" | grep -iE "(docs|documentation|readme)"; then
              gh issue create \
                --title "üìö Documentation Update Needed: $COMMIT_SUBJECT" \
                --body "**New Feature Documentation Required**

          **Type:** \`$COMMIT_TYPE\`
          **Scope:** \`$COMMIT_SCOPE\`
          **Subject:** $COMMIT_SUBJECT
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR
          **Branch:** ${{ github.ref_name }}

          **Full Commit Message:**
          \`\`\`
          $FULL_COMMIT_MSG
          \`\`\`

          **Documentation Checklist:**
          - [ ] API documentation updated
          - [ ] User guide updated
          - [ ] Code examples added
          - [ ] README updated
          - [ ] Changelog updated
          - [ ] Tests documented" \
                --label "type: documentation,$AREA_LABELS,priority: medium,auto-generated" \
                --assignee "$AUTHOR"
            fi
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  file-analysis:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: "Analyze Changed Files for Issues"
        run: |
          # Get changed files in this commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          COMMIT_HASH=$(git log -1 --pretty=%H)
          AUTHOR=$(git log -1 --pretty=%an)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files detected"
            exit 0
          fi

          echo "Analyzing changed files: $CHANGED_FILES"

          for file in $CHANGED_FILES; do
            if [[ -f "$file" ]]; then
              echo "Scanning file: $file"
              
              # Look for debug code
              if grep -n -E "(console\.log|debugger|alert\()" "$file" 2>/dev/null; then
                gh issue create \
                  --title "üêõ Debug Code Found: Remove debug statements in $file" \
                  --body "**Debug Code Detected**

          **File:** $file
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR

          Debug statements found that should be removed before production:

          \`\`\`
          $(grep -n -E "(console\.log|debugger|alert\()" "$file" | head -5)
          \`\`\`

          Please remove these debug statements." \
                  --label "type: bug,cleanup,auto-generated" \
                  --assignee "$AUTHOR"
              fi
              
              # Look for hardcoded values
              if grep -n -E "(localhost|127\.0\.0\.1|http://|mongodb://.*password)" "$file" 2>/dev/null; then
                gh issue create \
                  --title "‚ö†Ô∏è Hardcoded Values: Environment variables needed in $file" \
                  --body "**Hardcoded Values Detected**

          **File:** $file
          **Commit:** $COMMIT_HASH
          **Author:** $AUTHOR

          Hardcoded values found that should use environment variables:

          \`\`\`
          $(grep -n -E "(localhost|127\.0\.0\.1|http://|mongodb://.*password)" "$file" | head -3)
          \`\`\`

          Please move these to environment variables for security and flexibility." \
                  --label "area: security,priority: high,auto-generated" \
                  --assignee "$AUTHOR"
              fi
              
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
