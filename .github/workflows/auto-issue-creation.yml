# Testing workflow change detection - this should create an issue
name: "Auto Issue Creation"
on:
  push:
    branches: [main, staging, dev]
  workflow_dispatch:

jobs:
  todo-to-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "TODO to Issue"
        uses: alstr/todo-to-issue-action@v5
        with:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          CLOSE_ISSUES: "true"
          AUTO_P: "false"
          # Create with no labels - labels added in next job
          IDENTIFIERS: >
            [
              {"name": "TODO:", "labels": []},
              {"name": "FIX:", "labels": []}
            ]
          ISSUE_TEMPLATE: "{{ body }}\n\n---\n**File:** [{{ url }}]({{ url }})\n\n{{ snippet }}\n"

  workflow-changes-to-issue:
    runs-on: ubuntu-latest
    if: |
      contains(toJSON(github.event.commits[*].modified), '.github/workflows/') ||
      contains(toJSON(github.event.commits[*].added), '.github/workflows/') ||
      contains(toJSON(github.event.head_commit.modified), '.github/workflows/') ||
      contains(toJSON(github.event.head_commit.added), '.github/workflows/')
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Create Issue for Workflow Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash
          set -e

          echo "Detecting workflow file changes..."

          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '^\.github/workflows/.*\.(yml|yaml)$' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No workflow files changed"
            exit 0
          fi

          echo "Found workflow changes:"
          echo "$CHANGED_FILES"

          FIRST_FILE=$(echo "$CHANGED_FILES" | head -n1)
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)

          if [ "$FILE_COUNT" -gt 1 ]; then
            ISSUE_TITLE="[WORKFLOW] Updates to $FILE_COUNT workflow files"
          else
            ISSUE_TITLE="[WORKFLOW] Update to $(basename "$FIRST_FILE" | sed 's/\.[^.]*$//')"
          fi

          {
            echo "## Workflow Changes Detected"
            echo ""
            echo "The following workflow file(s) were modified in commit ${{ github.sha }}:"
            echo ""
            echo "### Changed Files:"
            while IFS= read -r file; do
              echo "- [\`$file\`](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/$file)"
            done <<< "$CHANGED_FILES"
            echo ""
            echo "### Commit Information:"
            echo "- **Author:** @${{ github.actor }}"
            echo "- **Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
            echo "- **Message:** ${{ github.event.head_commit.message }}"
            echo ""
            echo "### Diff Summary:"
            echo '```diff'
            git diff HEAD~1 HEAD -- $CHANGED_FILES | head -100
            echo '```'
            echo ""
            echo "---"
            echo ""
            echo "### Next Steps"
            echo ""
            echo "- [ ] Review changes for quality"
            echo "- [ ] Update related documentation if needed"
            echo "- [ ] Test affected functionality"
            echo ""
            echo "This issue was automatically created to track significant file changes."
          } > issue_body.md

          gh issue create \
            --title "$ISSUE_TITLE" \
            --body-file issue_body.md \
            --label "ci/cd,auto-generated,priority: high" \
            --assignee "${{ github.actor }}"

          echo "Issue created for workflow changes"

  apply-labels:
    needs: [todo-to-issue]
    if: always() && needs.todo-to-issue.result != 'failure'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: "Apply Labels to TODO Issues"
        run: |
          echo "🏷️ Applying labels to recent TODO/FIX issues..."

          # Wait for TODO issues to be fully created
          sleep 30

          # Only process issues created in the last 5 minutes
          CUTOFF_TIME=$(date -d '5 minutes ago' --iso-8601=seconds)
          echo "🔍 Looking for TODO/FIX issues created after: $CUTOFF_TIME"

          gh issue list --limit 20 --json number,title,body,createdAt | jq -r --arg cutoff "$CUTOFF_TIME" '.[] | select(.createdAt > $cutoff) | "\(.number)|\(.title)"' | while IFS='|' read -r number title; do
            if [[ -n "$number" && -n "$title" ]]; then
              echo ""
              echo "📝 Processing issue #$number: $title"
              
              # Get the commit author for assignment
              COMMIT_AUTHOR="${{ github.actor }}"
              echo "   👤 Assigning to commit author: $COMMIT_AUTHOR"
              
              # Get the full issue body for content analysis
              ISSUE_BODY=$(gh issue view "$number" --json body --jq '.body' 2>/dev/null || echo "")
              CONTENT="$title $ISSUE_BODY"
              
              # Check if this is a workflow issue (skip - already labeled)
              if [[ "$ISSUE_BODY" =~ "## Workflow Changes Detected" ]]; then
                echo "   🔧 Workflow issue detected - already has labels from creation"
                continue
              fi
              
              # Check if this issue was created from TODO/FIX comment
              if [[ "$ISSUE_BODY" =~ \*\*File:\*\* ]] || [[ "$ISSUE_BODY" =~ \*\*Code:\*\* ]]; then
                echo "   ✅ Confirmed TODO/FIX issue - validating and applying labels"
                
                # VALIDATION: Check for required template format
                if [[ ! "$title" =~ ^\[.*\] ]]; then
                  echo "   ❌ ERROR: TODO/FIX comment must have template prefix [TEMPLATE]"
                  gh issue edit "$number" --add-label "validation-failed" 2>/dev/null || true
                  gh issue comment "$number" --body "🚫 **Validation Failed**: TODO/FIX comments must include a template prefix like [COMPONENT], [SECURITY], [DOCS], etc." 2>/dev/null || true
                  continue
                fi
                
                # Extract template for validation
                TEMPLATE=$(echo "$title" | grep -o '^\[[^]]*\]' | tr '[:lower:]' '[:upper:]')
                TEMPLATE_NAME=$(echo "$TEMPLATE" | sed 's/\[//g' | sed 's/\]//g')
                
                # VALIDATION: Check content length after template
                CONTENT_AFTER_TEMPLATE=$(echo "$title" | sed 's/^\[[^]]*\][[:space:]]*//')
                if [[ ${#CONTENT_AFTER_TEMPLATE} -lt 10 ]]; then
                  echo "   ❌ ERROR: Content too short (${#CONTENT_AFTER_TEMPLATE} chars, need 10+)"
                  gh issue edit "$number" --add-label "validation-failed" 2>/dev/null || true
                  gh issue comment "$number" --body "🚫 **Validation Failed**: Content after template must be at least 10 characters. Got: '${CONTENT_AFTER_TEMPLATE}' (${#CONTENT_AFTER_TEMPLATE} chars)" 2>/dev/null || true
                  continue
                fi
                
                # VALIDATION: Check for multiple templates
                TEMPLATE_COUNT=$(echo "$title" | grep -o '\[.*\]' | wc -l)
                if [[ $TEMPLATE_COUNT -gt 1 ]]; then
                  echo "   ❌ ERROR: Multiple templates detected"
                  gh issue edit "$number" --add-label "validation-failed" 2>/dev/null || true
                  gh issue comment "$number" --body "🚫 **Validation Failed**: Only one template allowed per comment." 2>/dev/null || true
                  continue
                fi
                
                # VALIDATION: Check for valid template (FIXED LIST)
                VALID_TEMPLATES=(
                  "COMPONENT" "UI/UX" "ROUTES" "DATA" "SECURITY" "BUG" "PERF" 
                  "REFACTOR" "TEST" "DOCS" "DEPENDENCY" "ONBOARDING" "I18N" 
                  "A11Y" "FEATURE" "RESEARCH" "STATE" "CI" "CD" "WORKFLOW" 
                  "AUTOMATION" "ACTIONS" "DEPLOY" "BUILD"
                )
                
                VALID_TEMPLATE=false
                for valid in "${VALID_TEMPLATES[@]}"; do
                  if [[ "$TEMPLATE_NAME" == "$valid" ]]; then
                    VALID_TEMPLATE=true
                    break
                  fi
                done
                
                if [[ "$VALID_TEMPLATE" == "false" ]]; then
                  echo "   ❌ ERROR: Invalid template [$TEMPLATE_NAME]"
                  gh issue edit "$number" --add-label "validation-failed" 2>/dev/null || true
                  VALID_LIST=$(printf ", [%s]" "${VALID_TEMPLATES[@]}")
                  VALID_LIST=${VALID_LIST:2}  # Remove leading ", "
                  gh issue comment "$number" --body "🚫 **Validation Failed**: Template [$TEMPLATE_NAME] is not valid. Use one of: $VALID_LIST" 2>/dev/null || true
                  continue
                fi
                
                # VALIDATION: Check for special characters
                if [[ "$title" =~ [\$\`\&\|\>\<\;] ]]; then
                  echo "   ❌ ERROR: Special characters detected"
                  gh issue edit "$number" --add-label "validation-failed" 2>/dev/null || true
                  gh issue comment "$number" --body "🚫 **Validation Failed**: Cannot contain special characters: \$ \` & | > < ;" 2>/dev/null || true
                  continue
                fi
                
                echo "   ✅ Validation passed - applying labels"
                
                # Normalize template to uppercase and update title if needed
                PREFIX_PART=$(echo "$title" | grep -o '^\[[^]]*\]' | tr '[:lower:]' '[:upper:]')
                REST_OF_TITLE=$(echo "$title" | sed 's/^\[[^]]*\]//')
                NORMALIZED_TITLE="$PREFIX_PART$REST_OF_TITLE"
                
                if [[ "$NORMALIZED_TITLE" != "$title" ]]; then
                  echo "   📝 Normalizing template: $PREFIX_PART"
                  gh issue edit "$number" --title "$NORMALIZED_TITLE" 2>/dev/null || true
                  title="$NORMALIZED_TITLE"
                  TEMPLATE="$PREFIX_PART"
                  TEMPLATE_NAME=$(echo "$TEMPLATE" | sed 's/\[//g' | sed 's/\]//g')
                fi
                
                # Truncate if too long
                if [[ ${#title} -gt 80 ]]; then
                  title="${title:0:77}..."
                  gh issue edit "$number" --title "$title" 2>/dev/null || true
                fi
                
                echo "   🏷️ Adding base labels..."
                gh issue edit "$number" --add-label "auto-generated" 2>/dev/null || true
                gh issue edit "$number" --add-label "type: enhancement" 2>/dev/null || true
                
                # Assign to commit author
                gh issue edit "$number" --add-assignee "$COMMIT_AUTHOR" 2>/dev/null || true
                
                # Template-based labeling
                echo "   🎯 Processing template: [$TEMPLATE_NAME]"
                
                case "$TEMPLATE_NAME" in
                  "CI"|"CD"|"WORKFLOW"|"AUTOMATION"|"ACTIONS"|"DEPLOY"|"BUILD")
                    echo "     🔧 CI/CD template detected"
                    gh issue edit "$number" --add-label "ci/cd" 2>/dev/null || true
                    # CI/CD issues should keep type: enhancement (they're infrastructure improvements)
                    if [[ "$TEMPLATE_NAME" =~ ^(CI|CD|DEPLOY|BUILD)$ ]]; then
                      gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                    else
                      gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    fi
                    ;;
                  "COMPONENT"|"UI/UX")
                    echo "     🎨 Frontend template detected"
                    gh issue edit "$number" --add-label "area: frontend" 2>/dev/null || true
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                  "ROUTES"|"DATA")
                    echo "     🔌 API/Backend template detected"
                    gh issue edit "$number" --add-label "area: api" 2>/dev/null || true
                    gh issue edit "$number" --add-label "area: backend" 2>/dev/null || true
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                  "SECURITY")
                    echo "     🔒 Security template detected"
                    gh issue edit "$number" --add-label "area: security" 2>/dev/null || true
                    gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                    # Check if this was a FIX comment (security vulnerability)
                    if [[ "$ISSUE_BODY" =~ FIX: ]]; then
                      echo "     🐛 Security FIX - changing to bug type"
                      gh issue edit "$number" --remove-label "type: enhancement" 2>/dev/null || true
                      gh issue edit "$number" --add-label "type: bug" 2>/dev/null || true
                    fi
                    ;;
                  "BUG")
                    echo "     🐛 Bug template detected"
                    gh issue edit "$number" --remove-label "type: enhancement" 2>/dev/null || true
                    gh issue edit "$number" --add-label "type: bug" 2>/dev/null || true
                    if [[ "$ISSUE_BODY" =~ FIX: ]]; then
                      gh issue edit "$number" --add-label "priority: high" 2>/dev/null || true
                    else
                      gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    fi
                    ;;
                  "PERF")
                    echo "     ⚡ Performance template detected"
                    gh issue edit "$number" --add-label "performance" 2>/dev/null || true
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                  "REFACTOR")
                    echo "     🔧 Refactor template detected"
                    gh issue edit "$number" --add-label "tech-debt" 2>/dev/null || true
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                  "TEST")
                    echo "     🧪 Test template detected"
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                  "DOCS")
                    echo "     📚 Documentation template detected"
                    gh issue edit "$number" --remove-label "type: enhancement" 2>/dev/null || true
                    gh issue edit "$number" --add-label "type: documentation" 2>/dev/null || true
                    gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                    ;;
                  "DEPENDENCY")
                    echo "     📦 Dependency template detected"
                    gh issue edit "$number" --add-label "priority: low" 2>/dev/null || true
                    ;;
                  "FEATURE")
                    echo "     ✨ Feature template detected"
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                  *)
                    echo "     📋 Other template: $TEMPLATE_NAME"
                    gh issue edit "$number" --add-label "priority: medium" 2>/dev/null || true
                    ;;
                esac
                
                # Technology detection
                if [[ "$CONTENT" =~ (Next\.js|NextJS|Next) ]]; then
                  gh issue edit "$number" --add-label "nextjs" 2>/dev/null || true
                fi
                
                # Content-based labeling
                if [[ "$CONTENT" =~ (console\.|alert\(|debugger) ]]; then
                  echo "     🧹 Debug code detected - adding cleanup label"
                  gh issue edit "$number" --add-label "cleanup" 2>/dev/null || true
                fi
                
                if [[ "$CONTENT" =~ (performance|optimize|speed) ]] && [[ ! "$TEMPLATE_NAME" == "PERF" ]]; then
                  echo "     ⚡ Performance keywords detected"
                  gh issue edit "$number" --add-label "performance" 2>/dev/null || true
                fi
                
                echo "   ✅ Labels applied successfully"
                
                # Show final status
                FINAL_LABELS=$(gh issue view "$number" --json labels --jq '.labels | map(.name) | join(", ")' 2>/dev/null || echo "Failed to get labels")
                echo "   🏷️ Final labels: $FINAL_LABELS"
              else
                echo "   ⚠️ Not a TODO/FIX issue - skipping"
              fi
            fi
          done

          echo ""
          echo "🎉 Issue labeling complete"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
