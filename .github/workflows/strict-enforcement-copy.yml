# =================================================================
# INFRASTRUCTURE-LEVEL ENFORCEMENT WORKFLOW
# =================================================================
# Purpose: Enforces security, quality, and standards at the CI/CD level
# Triggers: All pushes and pull requests on any branch
# Enforcement: Security scanning, code quality, build verification, TODO standards
#
# This workflow provides multiple security and quality gates:
# 1. Security scanning for sensitive data and dangerous patterns
# 2. Code quality enforcement through ESLint
# 3. Build verification to ensure deployability
# 4. Dependency vulnerability scanning
# 5. TODO/FIX comment standards enforcement
#
# These checks run on every push to prevent security issues and
# maintain code quality standards across the entire project.
# =================================================================

name: "Infrastructure-Level Enforcement"

# Runs on all branches for comprehensive protection
# Ensures no branch can bypass security and quality checks
on:
  push:
    branches: ["**"] # All push events on any branch
  pull_request:
    branches: ["**"] # All pull requests targeting any branch

# Required permissions for security scanning and content analysis
permissions:
  security-events: write # Required for security scanning and reporting
  contents: read # Required to read repository content for analysis

jobs:
  # =================================================================
  # JOB 1: CORE SECURITY AND QUALITY ENFORCEMENT
  # =================================================================
  # Primary enforcement job that validates security, quality, and buildability
  # This job must pass for any code to be merged or deployed

  build:
    name: "Security & Quality Gate"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Repository with Full History"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for comprehensive security scanning

      - name: "Setup Node.js Environment"
        uses: actions/setup-node@v4
        with:
          node-version: "18" # LTS version for stability
          cache: "npm" # Cache dependencies for faster builds

      # =================================================================
      # SECURITY SCANNING GATE
      # =================================================================
      # Scans codebase for security vulnerabilities and sensitive data
      # Prevents commits containing secrets, API keys, or dangerous patterns

      - name: "Security Vulnerability Scanning"
        run: |
          echo "üîí Starting comprehensive security scan..."
          echo "üîç Scanning for sensitive data and dangerous code patterns..."
          echo ""

          # =================================================================
          # STRIPE API KEY DETECTION
          # =================================================================
          # Prevents secret Stripe keys from being committed to repository
          # Pattern: sk_ followed by at least 20 alphanumeric characters

          echo "üí≥ Checking for Stripe secret keys..."
          if grep -r "sk_[a-zA-Z0-9]\{20,\}" src/ 2>/dev/null; then
            echo ""
            echo "‚ùå CRITICAL SECURITY VIOLATION: Stripe secret key detected"
            echo "üö® Secret API keys must never be committed to version control"
            echo ""
            echo "üîß Immediate actions required:"
            echo "   1. Remove the secret key from all files"
            echo "   2. Add key to .env.local (excluded from git)"
            echo "   3. Use process.env.STRIPE_SECRET_KEY in code"
            echo "   4. Rotate the compromised key in Stripe dashboard"
            echo ""
            exit 1
          fi
          echo "   ‚úÖ No Stripe secret keys found"

          # =================================================================
          # PUBLIC API KEY DETECTION
          # =================================================================
          # Detects public API keys that might be exposed unintentionally
          # Pattern: pk_ followed by at least 20 alphanumeric characters

          echo "üîë Checking for exposed public API keys..."
          if grep -r "pk_[a-zA-Z0-9]\{20,\}" src/ 2>/dev/null; then
            echo ""
            echo "‚ùå SECURITY VIOLATION: Public API key found in source code"
            echo "‚ö†Ô∏è  Public keys should be in environment variables"
            echo ""
            echo "üîß Recommended fix:"
            echo "   1. Move key to .env.local as NEXT_PUBLIC_STRIPE_KEY"
            echo "   2. Use process.env.NEXT_PUBLIC_STRIPE_KEY in code"
            echo "   3. Ensure .env.local is in .gitignore"
            echo ""
            exit 1
          fi
          echo "   ‚úÖ No exposed public API keys found"

          # =================================================================
          # DANGEROUS CODE PATTERN DETECTION
          # =================================================================
          # Scans for patterns that can lead to XSS or code injection vulnerabilities
          # Patterns: eval(), innerHTML assignment, document.write()

          echo "‚ö†Ô∏è  Checking for dangerous code patterns..."
          if grep -rE "\beval\s*\(|innerHTML\s*=|document\.write\s*\(" src/ 2>/dev/null; then
            echo ""
            echo "‚ùå SECURITY VIOLATION: Dangerous code patterns detected"
            echo "üõ°Ô∏è  These patterns can lead to XSS vulnerabilities or code injection"
            echo ""
            echo "üö´ Detected dangerous patterns:"
            echo "   ‚Ä¢ eval() - Can execute arbitrary code"
            echo "   ‚Ä¢ innerHTML = - Can inject malicious HTML/JS"
            echo "   ‚Ä¢ document.write() - Can overwrite page content"
            echo ""
            echo "üîß Safe alternatives:"
            echo "   ‚Ä¢ Use JSON.parse() instead of eval()"
            echo "   ‚Ä¢ Use textContent or createElement() instead of innerHTML"
            echo "   ‚Ä¢ Use modern DOM methods instead of document.write()"
            echo ""
            exit 1
          fi
          echo "   ‚úÖ No dangerous code patterns found"

          echo ""
          echo "üîí Security scanning completed successfully"
          echo "‚úÖ Repository is free from known security vulnerabilities"

      # =================================================================
      # DEPENDENCY INSTALLATION
      # =================================================================
      # Installs project dependencies for quality checks and build verification

      - name: "Install Project Dependencies"
        run: |
          echo "üì¶ Installing project dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"

      # =================================================================
      # CODE QUALITY GATE
      # =================================================================
      # Enforces code quality standards through ESLint
      # Prevents commits that don't meet established coding standards

      - name: "Code Quality Enforcement"
        run: |
          echo "üßπ Starting code quality validation..."
          echo "üìã Running ESLint checks for code standards..."

          npm run lint || {
            echo ""
            echo "‚ùå CODE QUALITY GATE FAILED"
            echo "üö® Your code does not meet the established quality standards"
            echo ""
            echo "üîß To fix these issues:"
            echo "   1. Run 'npm run lint:fix' to auto-fix simple issues"
            echo "   2. Manually fix remaining lint errors"
            echo "   3. Run 'npm run lint' to verify all issues are resolved"
            echo ""
            echo "üìñ Coding standards enforced:"
            echo "   ‚Ä¢ Accessibility compliance (jsx-a11y)"
            echo "   ‚Ä¢ React best practices"
            echo "   ‚Ä¢ Modern JavaScript patterns (Unicorn)"
            echo "   ‚Ä¢ Code complexity limits (SonarJS)"
            echo "   ‚Ä¢ Import organization and path consistency"
            echo ""
            exit 1
          }

          echo "‚úÖ Code quality checks passed"
          echo "üéâ All code meets established quality standards"

      # =================================================================
      # BUILD VERIFICATION GATE
      # =================================================================
      # Ensures code can be built successfully for production deployment
      # Prevents deployment of code that would fail in production

      - name: "Production Build Verification"
        run: |
          echo "üèóÔ∏è  Starting production build verification..."
          echo "üîß Testing Next.js production build process..."

          npm run build || {
            echo ""
            echo "‚ùå BUILD GATE FAILED"
            echo "üö® Code cannot be built for production deployment"
            echo ""
            echo "üîç Common build failure causes:"
            echo "   ‚Ä¢ TypeScript/JSDoc type errors"
            echo "   ‚Ä¢ Missing environment variables"
            echo "   ‚Ä¢ Import/export syntax errors"
            echo "   ‚Ä¢ Missing dependencies"
            echo "   ‚Ä¢ React component errors"
            echo ""
            echo "üîß To fix build issues:"
            echo "   1. Run 'npm run build' locally to reproduce"
            echo "   2. Fix all compilation errors"
            echo "   3. Ensure all environment variables are properly configured"
            echo "   4. Test the build in development environment"
            echo ""
            exit 1
          }

          echo "‚úÖ Production build verification passed"
          echo "üöÄ Code is ready for production deployment"

        env:
          # MongoDB connection for build-time operations
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      # =================================================================
      # DEPENDENCY VULNERABILITY SCANNING
      # =================================================================
      # Scans for high-severity vulnerabilities in project dependencies
      # Prevents deployment with known security vulnerabilities

      - name: "Dependency Security Audit"
        run: |
          echo "üîç Starting dependency vulnerability scan..."
          echo "üõ°Ô∏è  Checking for high-severity security vulnerabilities..."

          npm audit --audit-level=high || {
            echo ""
            echo "‚ùå SECURITY GATE FAILED"
            echo "üö® High-severity vulnerabilities found in dependencies"
            echo ""
            echo "üîß To resolve dependency vulnerabilities:"
            echo "   1. Run 'npm audit' to see detailed vulnerability report"
            echo "   2. Run 'npm audit fix' to auto-fix vulnerabilities"
            echo "   3. Update vulnerable packages to secure versions"
            echo "   4. Consider alternative packages if fixes unavailable"
            echo ""
            echo "‚ö†Ô∏è  Security policy: No high-severity vulnerabilities allowed"
            echo ""
            exit 1
          }

          echo "‚úÖ Dependency security audit passed"
          echo "üîí All dependencies are free from high-severity vulnerabilities"

  # =================================================================
  # JOB 2: DEVELOPMENT STANDARDS ENFORCEMENT
  # =================================================================
  # Enforces development standards and comment conventions
  # Ensures consistency in code documentation and TODO management

  enforce-standards:
    name: "Development Standards Enforcement"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js Environment"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: "Install Project Dependencies"
        run: |
          echo "üì¶ Installing dependencies for standards checking..."
          npm ci

      # =================================================================
      # COMMENT STANDARDS ENFORCEMENT
      # =================================================================
      # Validates that all TODO and FIX comments follow project standards
      # Ensures proper template usage and prevents malformed comments

      - name: "TODO/FIX Comment Standards Validation"
        run: |
          echo "üìù Starting TODO/FIX comment validation..."
          echo "üîç Checking all JavaScript/TypeScript files for comment standards..."
          echo ""
