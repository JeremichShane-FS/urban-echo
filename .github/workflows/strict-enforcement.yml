# =================================================================
# INFRASTRUCTURE-LEVEL ENFORCEMENT WORKFLOW
# =================================================================
# Purpose: Enforces security, quality, and standards at the CI/CD level
# Triggers: All pushes and pull requests on any branch
# Enforcement: Security scanning, code quality, build verification, TODO standards
#
# This workflow provides multiple security and quality gates:
# 1. Security scanning for sensitive data and dangerous patterns
# 2. Code quality enforcement through ESLint
# 3. Build verification to ensure deployability
# 4. Dependency vulnerability scanning
# 5. TODO/FIX comment standards enforcement
#
# These checks run on every push to prevent security issues and
# maintain code quality standards across the entire project.
# =================================================================

name: "Infrastructure-Level Enforcement"

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  security-events: write
  contents: read

jobs:
  build:
    name: "Security & Quality Gate"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: "Security Scanning"
        run: |
          echo "🔒 Starting comprehensive security scan..."
          echo "🔍 Scanning for sensitive data and dangerous code patterns..."

          echo "💳 Checking for Stripe secret keys..."
          if grep -r "sk_[a-zA-Z0-9]\{20,\}" src/ 2>/dev/null; then
            echo ""
            echo "❌ CRITICAL SECURITY VIOLATION: Stripe secret key detected"
            echo "🚨 Secret API keys must never be committed to version control"
            echo "🔧 Fix: Move to .env.local and use process.env.STRIPE_SECRET_KEY"
            exit 1
          fi
          echo "   ✅ No Stripe secret keys found"

          echo "🔑 Checking for exposed public API keys..."
          if grep -r "pk_[a-zA-Z0-9]\{20,\}" src/ 2>/dev/null; then
            echo ""
            echo "❌ SECURITY VIOLATION: Public API key found in source code"
            echo "⚠️  Public keys should be in environment variables"
            echo "🔧 Fix: Move to .env.local as NEXT_PUBLIC_STRIPE_KEY"
            exit 1
          fi
          echo "   ✅ No exposed public API keys found"

          echo "⚠️  Checking for dangerous code patterns..."
          if grep -rE "\beval\s*\(|innerHTML\s*=|document\.write\s*\(" src/ 2>/dev/null; then
            echo ""
            echo "❌ SECURITY VIOLATION: Dangerous code patterns detected"
            echo "🛡️  These patterns can lead to XSS vulnerabilities or code injection"
            echo "🔧 Safe alternatives: Use JSON.parse(), textContent, or modern DOM methods"
            exit 1
          fi
          echo "   ✅ No dangerous code patterns found"

          echo ""
          echo "✅ Security scanning completed successfully"

      - name: "Install Dependencies"
        run: npm ci

      - name: "Code Quality Gate"
        run: |
          echo "🧹 Starting code quality validation..."
          echo "📋 Running ESLint checks for code standards..."

          npm run lint || {
            echo ""
            echo "❌ CODE QUALITY GATE FAILED"
            echo "🚨 Your code does not meet the established quality standards"
            echo ""
            echo "🔧 To fix these issues:"
            echo "   1. Run 'npm run lint:fix' to auto-fix simple issues"
            echo "   2. Manually fix remaining lint errors"
            echo "   3. Run 'npm run lint' to verify all issues are resolved"
            exit 1
          }

          echo "✅ Code quality checks passed"
          echo "🎉 All code meets established quality standards"

      - name: "Build Verification"
        run: |
          echo "🏗️  Starting production build verification..."
          echo "🔧 Testing Next.js production build process..."

          npm run build || {
            echo ""
            echo "❌ BUILD GATE FAILED"
            echo "🚨 Code cannot be built for production deployment"
            echo ""
            echo "🔍 Common build failure causes:"
            echo "   • TypeScript/JSDoc type errors"
            echo "   • Missing environment variables"
            echo "   • Import/export syntax errors"
            echo "   • React component errors"
            echo ""
            echo "🔧 To fix build issues:"
            echo "   1. Run 'npm run build' locally to reproduce"
            echo "   2. Fix all compilation errors"
            echo "   3. Ensure all environment variables are configured"
            exit 1
          }

          echo "✅ Production build verification passed"
          echo "🚀 Code is ready for production deployment"
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

      - name: "Dependency Vulnerability Check"
        run: |
          echo "🔍 Starting dependency vulnerability scan..."
          echo "🛡️  Checking for high-severity security vulnerabilities..."

          npm audit --audit-level=high || {
            echo ""
            echo "❌ SECURITY GATE FAILED"
            echo "🚨 High-severity vulnerabilities found in dependencies"
            echo ""
            echo "🔧 To resolve dependency vulnerabilities:"
            echo "   1. Run 'npm audit' to see detailed vulnerability report"
            echo "   2. Run 'npm audit fix' to auto-fix vulnerabilities"
            echo "   3. Update vulnerable packages to secure versions"
            echo "   4. Consider alternative packages if fixes unavailable"
            echo ""
            echo "⚠️  Security policy: No high-severity vulnerabilities allowed"
            exit 1
          }

          echo "✅ Dependency security audit passed"
          echo "🔒 All dependencies are free from high-severity vulnerabilities"
