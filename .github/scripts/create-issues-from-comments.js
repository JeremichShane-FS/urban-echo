const { Octokit } = require("@octokit/rest");
const fs = require("fs").promises;

const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
const owner = process.env.GITHUB_REPOSITORY.split("/")[0];
const repo = process.env.GITHUB_REPOSITORY.split("/")[1];

async function findCommentsAndCreateIssues() {
  const filesToScan = ["src/app/page.js", "src/design-system/buttons/Button/index.jsx"]; // TODO: Get all relevant files dynamically

  for (const filePath of filesToScan) {
    try {
      const content = await fs.readFile(filePath, "utf8");
      const lines = content.split("\n");

      lines.forEach(async (line, index) => {
        const lineNumber = index + 1;
        // Regex to find TODO:, FIX:, BUG:, OPTIMIZE: comments
        const match = line.match(/(TODO|FIX|BUG|OPTIMIZE):\s*(.*)/i);
        if (match) {
          const keyword = match[1].toUpperCase();
          const commentText = match[2].trim();
          const title = `${keyword}: ${commentText.substring(0, 70)}${
            commentText.length > 70 ? "..." : ""
          }`; // Truncate title for brevity
          const body = `Found '${keyword}' comment in \`${filePath}\` at line ${lineNumber}:\n\n\`\`\`\n${commentText}\n\`\`\`\n\n_This issue was auto-generated by a custom workflow._`;

          const labels = ["auto-generated"];
          if (keyword === "TODO") {
            labels.push("type: enhancement", "refinement");
          } else if (keyword === "FIX" || keyword === "BUG") {
            labels.push("type: bug", "priority: high");
          } else if (keyword === "OPTIMIZE") {
            labels.push("type: optimization", "priority: medium");
          }

          if (commentText.toLowerCase().includes("database")) {
            labels.push("area: database");
          }
          if (commentText.toLowerCase().includes("api")) {
            labels.push("area: api");
          }

          const existingIssues = await octokit.rest.issues.listForRepo({
            owner,
            repo,
            state: "open",
            q: `in:title "${title}" in:body "${filePath}"`,
          });

          if (existingIssues.data.length === 0) {
            console.log(`Creating issue: ${title}`);
            await octokit.rest.issues.create({
              owner,
              repo,
              title: title,
              body: body,
              labels: labels,
            });
          } else {
            console.log(`Skipping duplicate issue: ${title}`);
          }
        }
      });
    } catch (error) {
      console.error(`Error reading file ${filePath}:`, error.message);
    }
  }
}

findCommentsAndCreateIssues().catch(console.error);
