#!/bin/sh

# =================================================================
# HUSKY PRE-COMMIT HOOK - E-COMMERCE PLATFORM
# =================================================================
# Purpose: Enforces code quality standards before each commit
# Runs: ESLint, Prettier formatting, and lint-staged checks
# Prevents: Commits that don't meet project quality standards
# 
# This hook ensures all code meets professional standards before
# being committed to the repository, maintaining code consistency
# across the entire e-commerce development team.
# =================================================================

echo "Starting pre-commit quality checks..."
echo "Validating staged files for code standards..."

# =================================================================
# PRETTIER CONFIGURATION SETUP
# =================================================================
# Create temporary Prettier config from project configuration
# This ensures consistent formatting across all staged files
# Uses the centralized prettier-config.js for consistency
#
# NOTE: Ensure .prettier.temp.json is in .gitignore to prevent
# accidental commits of this temporary configuration file

echo "Setting up Prettier configuration..."

node --input-type=module -e "
import fs from 'fs';
import { prettierConfig } from './scripts/prettier-config.js';
fs.writeFileSync('.prettier.temp.json', JSON.stringify(prettierConfig, null, 2));
" || { 
  echo '‚ùå Failed to create temporary Prettier config'
  echo 'üí° Ensure scripts/prettier-config.js exists and is valid'
  echo 'üí° Verify .prettier.temp.json is in .gitignore'
  exit 1
}

echo "‚úÖ Prettier configuration loaded successfully"

# =================================================================
# LINT-STAGED EXECUTION
# =================================================================
# Run lint-staged to process only staged files
# This includes: ESLint fixes, Prettier formatting, type checking
# --allow-empty: Prevents failure when no files are staged

echo "Running lint-staged on staged files..."
echo "‚Üí   ESLint: Checking code quality and fixing auto-fixable issues"
echo "‚Üí   Prettier: Formatting code for consistency"
echo "‚Üí   Type checking: Validating TypeScript/JSDoc types"

npx lint-staged --allow-empty || {
  echo ""
  echo "‚ùå Lint-staged checks failed!"
  echo "üí° Fix the issues above before committing"
  echo "üí° Run 'npm run lint:fix' to auto-fix some issues"
  echo "üí° Run 'npm run format' to fix formatting issues"
  echo "üí° Temporary config will be cleaned up automatically"
  exit 1
}

# =================================================================
# CLEANUP AND SUCCESS
# =================================================================
# Remove temporary Prettier configuration file
# Report successful completion of all quality checks

echo "üßπ Cleaning up temporary Prettier configuration..."
rm -f .prettier.temp.json

echo ""
echo "‚úÖ All pre-commit checks passed successfully!"
echo "‚úÖ Your code meets quality standards and is ready for commit"
echo "‚Üí  Staged files have been formatted and validated"
echo ""